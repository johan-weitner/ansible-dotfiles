#!/bin/bash

# Check if the vault password file exists
if [ ! -f ~/.config/vault/vault.secret ]; then
  echo "Vault secret not found - exiting..."
  exit 1
fi

# Function that installs Homebrew
function install_homebrew() {
  echo "Installing Homebrew..."
  # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

# Function that installs Chocolatey
function install_chocolatey() {
  echo "Installing Chocolatey..."
  # Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
}

# Check if Ansible is installed
if ! command -v ansible >/dev/null; then
  # Install Ansible if it's missing
  echo "Ansible is not installed. Installing..."
  if [[ "$(uname)" == "Darwin" ]]; then
    # MacOS
    install_homebrew
    brew install ansible
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    # Linux
    sudo apt update && sudo apt install -y ansible
  elif [[ "$(ver)" == *"Windows"* ]]; then
    # Windows
    install_chocolatey
    choco install ansible
  else
    #  Unknown OS - abort
    echo "Unknown OS - exiting..."
    exit 1
  fi
fi

# NEW_USER is set by $1, falling back on static string if missing
NEW_USER="${1:-johanweitner}"

echo "***** SETTING UP NEW MACHINE FOR USER $NEW_USER *****"
echo ""

# Execute the playbook
# ansible-playbook -i hosts.ini playbook.yml
ansible-playbook playbook.yml -i hosts.ini --vault-password-file ~/.config/vault/vault.secret --ask-become-pass -u "$NEW_USER" --become-user "$NEW_USER"
