---
  - name: SET UP A NEW MACHINE
    hosts: localhost
    connection: local
    become: yes
    gather_facts: yes

    pre_tasks:
    - name: Detect WSL
      ansible.builtin.import_tasks: pre_tasks/detect_wsl.yml
      tags:
        - always

    - name: Detect wsl
      ansible.builtin.debug:
        var: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Confirm Windows PowerShell Execution Policy
      ansible.builtin.import_tasks: pre_tasks/powershell_executionpolicy.yml
      when: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Detect Host User
      ansible.builtin.import_tasks: pre_tasks/whoami_wsl.yml
      when: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Detect Host User
      ansible.builtin.import_tasks: pre_tasks/whoami.yml
      tags:
        - always

    # - name: Install Python Watchdog
    #   ansible.builtin.shell:
    #     cmd: pip install -U watchdog
    #   tags:
    #     - always

        # {{ ansible_user_dir }}

    # - name: Detect MacOS user directory
    #   ansible.builtin.set_fact:
    #     ansible_user_dir: "/Users/{{ ansible_user or ansible_env['SUDO_USER'] }}"
    #   when: ansible_facts['os_family'] == 'Darwin'

    # - name: Detect Linux user directory
    #   ansible.builtin.set_fact:
    #     ansible_user_dir: "/home/{{ ansible_user or ansible_env['SUDO_USER'] }}"
    #   when: ansible_facts['os_family'] == 'Linux'

    # - name: Detect Windows user directory
    #   ansible.builtin.set_fact:
    #     ansible_user_dir: "/Users/{{ ansible_user or ansible_env['SUDO_USER'] }}"
    #   when: ansible_facts['os_family'] == 'Windows'

    - name: Show detected user directory
      ansible.builtin.debug:
        var: ansible_user_dir

    # - name: Install HomeBrew
    #   ansible.builtin.import_tasks: roles/homebrew/tasks/main.yml
    #   tags:
    #     - always

    # - name: Install dependencies with Homebrew
    #   homebrew:
    #     name:
    #       - curl
    #       - git
    #     state: present
    #   when: ansible_facts['os_family'] == 'Darwin'
    #   become: false
    #   ignore_errors: yes

    # # Else install dependencies with apt
    # - name: Install dependencies
    #   apt:
    #     name:
    #       - build-essential
    #       - curl
    #       - file
    #       - git
    #       - snap
    #       - cargo
    #       # - python
    #     state: present
    #   when: ansible_facts['os_family'] != 'Darwin'

    # - name: Ensure snapd service is started and enabled
    #   service:
    #     name: snapd
    #     state: started
    #     enabled: yes
    #   when: ansible_facts['os_family'] != 'Darwin'
    #   ignore_errors: yes


    tasks:
    - name: Set roles
      ansible.builtin.set_fact:
        run_roles: "{{ ansible_run_tags != ['all'] and ansible_run_tags or default_roles | difference(exclude_roles | default([])) }}"
      tags:
        - always

    - name: Display roles
      ansible.builtin.debug:
        var: run_roles
      tags:
        - always

    # - name: Run roles
    #   ansible.builtin.include_role:
    #     apply:
    #       tags:
    #         - "{{ roles_item }}"
    #     name: "{{ roles_item }}"
    #   loop_control:
    #     loop_var: roles_item
    #   with_items: "{{ run_roles }}"
    #   tags:
    #     - always
    #   ignore_errors: true


    # Handle secret keys, tokens, etc
    - name: Get env variables
      ansible.builtin.include_vars:
        file: "./group_vars/all.yml"
        name: vars

    # - name: Write Git user name to Git config
    #   ansible.builtin.shell:
    #     cmd: "git config --global user.name {{ vars.git_creds.GIT_USER_NAME }}"

    # - name: Write Git user email to Git config
    #   ansible.builtin.shell:
    #     cmd: "git config --global user.name {{ vars.git_creds.GIT_USER_EMAIL }}"

    # - name: Write secret keys and tokens to profile
    #   ansible.builtin.lineinfile:
    #     path: "{{ansible_user_dir}}/.profile"
    #     line: 'export {{ item.key }}="{{ item.value }}"'
    #   loop: "{{ vars.env_vars | dict2items }}"

    # - name: Create private SSH key file
    #   ansible.builtin.file:
    #     path: "{{ansible_user_dir}}/.ssh/id_ed25519"
    #     state: touch
    #     mode: u=rw,g=r,o=r

    # - name: Create public SSH key file
    #   ansible.builtin.file:
    #     path: "{{ansible_user_dir}}/.ssh/id_ed25519.pub"
    #     state: touch
    #     mode: u=rw,g=r,o=r

    # - name: Print private SSH key file
    #   ansible.builtin.lineinfile:
    #     path: "{{ansible_user_dir}}/.ssh/id_ed25519"
    #     line: "{{vars.ssh_keys.id_ed25519}}"

    # - name: Print public SSH key file
    #   ansible.builtin.lineinfile:
    #     path: "{{ansible_user_dir}}/.ssh/id_ed25519.pub"
    #     line: "{{vars.ssh_keys.id_ed25519_pub}}"
