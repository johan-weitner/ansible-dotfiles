---
  - name: SET UP A NEW MACHINE
    hosts: localhost
    become: yes
    gather_facts: yes

    # Install dependencies with Homebrew if MacOS
    tasks:
    - name: Check if Homebrew is installed
      command: which brew
      register: brew_check
      ignore_errors: yes
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: yes

    - name: Install Homebrew
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Darwin' and brew_check.rc != 0
      ignore_errors: yes

    - name: Ensure Homebrew is up to date
      command: brew update
      when: ansible_facts['os_family'] == 'Darwin' and brew_check.rc == 0
      become: false
      ignore_errors: yes

    - name: Install dependencies with Homebrew
      homebrew:
        name:
          - curl
          - git
        state: present
      when: ansible_facts['os_family'] == 'Darwin'
      become: false
      ignore_errors: yes

    # Else install dependencies with apt
    - name: Install dependencies
      apt:
        name:
          - build-essential
          - curl
          - file
          - git
          - snap
          - cargo
          # - python
        state: present
      when: ansible_facts['os_family'] != 'Darwin'

    - name: Ensure snapd service is started and enabled
      service:
        name: snapd
        state: started
        enabled: yes
      when: ansible_facts['os_family'] != 'Darwin'
      ignore_errors: yes

    - name: Add Homebrew to PATH on macOS and Linux
      shell: echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.profile
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: yes

    - name: Source Homebrew
      shell: /bin/bash -c 'source ~/.profile'
      args:
        executable: /bin/bash
      when: ansible_facts['os_family'] == 'Darwin'
      ignore_errors: yes

    - name: Install zsh
      package:
        name: zsh
        state: present
      become: no

    - name: Install oh-my-zsh
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh.git
        dest: ~/.oh-my-zsh
        clone: yes
        update: yes

    - name: Install MacOS plugins
      block:
        - name: Install MacOS plugins
          package:
            name: "{{ item }}"
            state: present
          loop:
            - git
            - zsh
      when: ansible_facts['os_family'] == 'Darwin'
      become: no

    - name: Set zsh as default shell
      user:
        # name: "{{ ansible_user }}"
        name: "johanweitner"
        shell: /bin/zsh

    - name: Configure oh-my-zsh
      block:
        - name: Create .zshrc file
          file:
            path: ~/.zshrc
            state: touch
        - name: Add oh-my-zsh configuration to .zshrc
          lineinfile:
            dest: ~/.zshrc
            line: "source ~/.oh-my-zsh/oh-my-zsh.sh"
            create: yes



    # Handle secret keys, tokens, etc
    - name: Get env variables
      ansible.builtin.include_vars:
        file: "./group_vars/all.yml"
        name: vars

    - name: Delete tmp directory if it exists
      ansible.builtin.file:
        path: ./tmp
        state: absent

    - name: Create tmp directory
      ansible.builtin.file:
        path: ./tmp
        state: directory
        mode: '0755'

    - name: Create target files in tmp directory
      ansible.builtin.file:
        path: ./tmp/{{ item.key }}
        state: touch
        mode: u=rw,g=r,o=r
      loop: "{{ vars.git_creds | dict2items }}"

    - name: Print secrets to tmp directory
      ansible.builtin.lineinfile:
        path: ./tmp/{{ item.key }}
        line: 'export {{ item.key }}="{{ item.value }}"'
      loop: "{{ vars.git_creds | dict2items }}"

    - name: Assemble env vars from tmp directory
      ansible.builtin.assemble:
        src: ./tmp
        dest: ./git_creds.txt



    - name: Delete tmp directory if it exists
      ansible.builtin.file:
        path: ./tmp
        state: absent

    - name: Create tmp directory
      ansible.builtin.file:
        path: ./tmp
        state: directory
        mode: '0755'

    - name: Create target files in tmp directory
      ansible.builtin.file:
        path: ./tmp/{{ item.key }}
        state: touch
        mode: u=rw,g=r,o=r
      loop: "{{ vars.env_vars | dict2items }}"

    - name: Print secrets to tmp directory
      ansible.builtin.lineinfile:
        path: ./tmp/{{ item.key }}
        line: 'export {{ item.key }}="{{ item.value }}"'
      loop: "{{ vars.env_vars | dict2items }}"

    - name: Assemble env vars from tmp directory
      ansible.builtin.assemble:
        src: ./tmp
        dest: ./env-vars.txt


    # - name: Delete tmp directory if it exists
    #   ansible.builtin.file:
    #     path: ./tmp
    #     state: absent

    # - name: Create tmp directory
    #   ansible.builtin.file:
    #     path: ./tmp
    #     state: directory
    #     mode: '0755'

    # - name: Create target files in tmp directory
    #   ansible.builtin.file:
    #     path: ./tmp/{{ item.key }}
    #     state: touch
    #     mode: u=rw,g=r,o=r
    #   loop: "{{ vars.ssh_keys | dict2items }}"

    # - name: Print secrets to tmp directory
    #   ansible.builtin.lineinfile:
    #     path: ./tmp/{{ item.key }}
    #     line: '{{ item.value }}'
    #   loop: "{{ vars.ssh_keys | dict2items }}"

    # - name: Assemble env vars from tmp directory
    #   ansible.builtin.assemble:
    #     src: ./tmp
    #     dest: ./ssh_keys.txt





    roles:
      - cargo
      - thejaxon.vscode
      - 1password
      # - alacritty
